// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/benderr/keypass/internal/server/domain/record/delivery (interfaces: RecordUsecase,SessionManager)
//
// Generated by this command:
//
//	mockgen -destination=internal/server/domain/record/delivery/mocks/mocks.go -package=mocks github.com/benderr/keypass/internal/server/domain/record/delivery RecordUsecase,SessionManager
//
// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	dto "github.com/benderr/keypass/internal/server/domain/record/dto"
	echo "github.com/labstack/echo/v4"
	gomock "go.uber.org/mock/gomock"
)

// MockRecordUsecase is a mock of RecordUsecase interface.
type MockRecordUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockRecordUsecaseMockRecorder
}

// MockRecordUsecaseMockRecorder is the mock recorder for MockRecordUsecase.
type MockRecordUsecaseMockRecorder struct {
	mock *MockRecordUsecase
}

// NewMockRecordUsecase creates a new mock instance.
func NewMockRecordUsecase(ctrl *gomock.Controller) *MockRecordUsecase {
	mock := &MockRecordUsecase{ctrl: ctrl}
	mock.recorder = &MockRecordUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRecordUsecase) EXPECT() *MockRecordUsecaseMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockRecordUsecase) Create(arg0 context.Context, arg1 string, arg2 any, arg3 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockRecordUsecaseMockRecorder) Create(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRecordUsecase)(nil).Create), arg0, arg1, arg2, arg3)
}

// Delete mocks base method.
func (m *MockRecordUsecase) Delete(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockRecordUsecaseMockRecorder) Delete(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRecordUsecase)(nil).Delete), arg0, arg1, arg2)
}

// GetByUser mocks base method.
func (m *MockRecordUsecase) GetByUser(arg0 context.Context, arg1 string) ([]dto.ReadRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUser", arg0, arg1)
	ret0, _ := ret[0].([]dto.ReadRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUser indicates an expected call of GetByUser.
func (mr *MockRecordUsecaseMockRecorder) GetByUser(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUser", reflect.TypeOf((*MockRecordUsecase)(nil).GetByUser), arg0, arg1)
}

// Update mocks base method.
func (m *MockRecordUsecase) Update(arg0 context.Context, arg1, arg2 string, arg3 any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockRecordUsecaseMockRecorder) Update(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRecordUsecase)(nil).Update), arg0, arg1, arg2, arg3)
}

// MockSessionManager is a mock of SessionManager interface.
type MockSessionManager struct {
	ctrl     *gomock.Controller
	recorder *MockSessionManagerMockRecorder
}

// MockSessionManagerMockRecorder is the mock recorder for MockSessionManager.
type MockSessionManagerMockRecorder struct {
	mock *MockSessionManager
}

// NewMockSessionManager creates a new mock instance.
func NewMockSessionManager(ctrl *gomock.Controller) *MockSessionManager {
	mock := &MockSessionManager{ctrl: ctrl}
	mock.recorder = &MockSessionManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSessionManager) EXPECT() *MockSessionManagerMockRecorder {
	return m.recorder
}

// GetUserID mocks base method.
func (m *MockSessionManager) GetUserID(arg0 echo.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserID", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserID indicates an expected call of GetUserID.
func (mr *MockSessionManagerMockRecorder) GetUserID(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserID", reflect.TypeOf((*MockSessionManager)(nil).GetUserID), arg0)
}

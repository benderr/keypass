// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/benderr/keypass/internal/client/logic (interfaces: SecureRepository,IQueryClient)
//
// Generated by this command:
//
//	mockgen -destination=internal/client/logic/logicmocks/logicmocks.go -package=logicmocks github.com/benderr/keypass/internal/client/logic SecureRepository,IQueryClient
//
// Package logicmocks is a generated GoMock package.
package logicmocks

import (
	reflect "reflect"

	dto "github.com/benderr/keypass/internal/client/dto"
	session "github.com/benderr/keypass/internal/client/session"
	gomock "go.uber.org/mock/gomock"
)

// MockSecureRepository is a mock of SecureRepository interface.
type MockSecureRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSecureRepositoryMockRecorder
}

// MockSecureRepositoryMockRecorder is the mock recorder for MockSecureRepository.
type MockSecureRepositoryMockRecorder struct {
	mock *MockSecureRepository
}

// NewMockSecureRepository creates a new mock instance.
func NewMockSecureRepository(ctrl *gomock.Controller) *MockSecureRepository {
	mock := &MockSecureRepository{ctrl: ctrl}
	mock.recorder = &MockSecureRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSecureRepository) EXPECT() *MockSecureRepositoryMockRecorder {
	return m.recorder
}

// CheckUserPin mocks base method.
func (m *MockSecureRepository) CheckUserPin(arg0, arg1 string) (bool, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckUserPin", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CheckUserPin indicates an expected call of CheckUserPin.
func (mr *MockSecureRepositoryMockRecorder) CheckUserPin(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckUserPin", reflect.TypeOf((*MockSecureRepository)(nil).CheckUserPin), arg0, arg1)
}

// ClearUser mocks base method.
func (m *MockSecureRepository) ClearUser(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClearUser", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ClearUser indicates an expected call of ClearUser.
func (mr *MockSecureRepositoryMockRecorder) ClearUser(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearUser", reflect.TypeOf((*MockSecureRepository)(nil).ClearUser), arg0)
}

// CreateUser mocks base method.
func (m *MockSecureRepository) CreateUser(arg0, arg1 string) (*session.UserInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(*session.UserInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockSecureRepositoryMockRecorder) CreateUser(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockSecureRepository)(nil).CreateUser), arg0, arg1)
}

// GetRecords mocks base method.
func (m *MockSecureRepository) GetRecords(arg0, arg1 string) ([]dto.ClientRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecords", arg0, arg1)
	ret0, _ := ret[0].([]dto.ClientRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecords indicates an expected call of GetRecords.
func (mr *MockSecureRepositoryMockRecorder) GetRecords(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecords", reflect.TypeOf((*MockSecureRepository)(nil).GetRecords), arg0, arg1)
}

// LoadLastUser mocks base method.
func (m *MockSecureRepository) LoadLastUser() (*session.UserInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadLastUser")
	ret0, _ := ret[0].(*session.UserInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadLastUser indicates an expected call of LoadLastUser.
func (mr *MockSecureRepositoryMockRecorder) LoadLastUser() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadLastUser", reflect.TypeOf((*MockSecureRepository)(nil).LoadLastUser))
}

// UpdateRecords mocks base method.
func (m *MockSecureRepository) UpdateRecords(arg0, arg1 string, arg2 []dto.ClientRecord) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRecords", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRecords indicates an expected call of UpdateRecords.
func (mr *MockSecureRepositoryMockRecorder) UpdateRecords(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRecords", reflect.TypeOf((*MockSecureRepository)(nil).UpdateRecords), arg0, arg1, arg2)
}

// UpdateUserPin mocks base method.
func (m *MockSecureRepository) UpdateUserPin(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserPin", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserPin indicates an expected call of UpdateUserPin.
func (mr *MockSecureRepositoryMockRecorder) UpdateUserPin(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserPin", reflect.TypeOf((*MockSecureRepository)(nil).UpdateUserPin), arg0, arg1)
}

// UpdateUserToken mocks base method.
func (m *MockSecureRepository) UpdateUserToken(arg0, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserToken", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserToken indicates an expected call of UpdateUserToken.
func (mr *MockSecureRepositoryMockRecorder) UpdateUserToken(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserToken", reflect.TypeOf((*MockSecureRepository)(nil).UpdateUserToken), arg0, arg1, arg2)
}

// MockIQueryClient is a mock of IQueryClient interface.
type MockIQueryClient struct {
	ctrl     *gomock.Controller
	recorder *MockIQueryClientMockRecorder
}

// MockIQueryClientMockRecorder is the mock recorder for MockIQueryClient.
type MockIQueryClientMockRecorder struct {
	mock *MockIQueryClient
}

// NewMockIQueryClient creates a new mock instance.
func NewMockIQueryClient(ctrl *gomock.Controller) *MockIQueryClient {
	mock := &MockIQueryClient{ctrl: ctrl}
	mock.recorder = &MockIQueryClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIQueryClient) EXPECT() *MockIQueryClientMockRecorder {
	return m.recorder
}

// AddRecord mocks base method.
func (m *MockIQueryClient) AddRecord(arg0 string, arg1 dto.ServerRecord) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRecord", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddRecord indicates an expected call of AddRecord.
func (mr *MockIQueryClientMockRecorder) AddRecord(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRecord", reflect.TypeOf((*MockIQueryClient)(nil).AddRecord), arg0, arg1)
}

// AddRecordFile mocks base method.
func (m *MockIQueryClient) AddRecordFile(arg0 string, arg1 dto.ServerRecord) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRecordFile", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddRecordFile indicates an expected call of AddRecordFile.
func (mr *MockIQueryClientMockRecorder) AddRecordFile(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRecordFile", reflect.TypeOf((*MockIQueryClient)(nil).AddRecordFile), arg0, arg1)
}

// DeleteRecord mocks base method.
func (m *MockIQueryClient) DeleteRecord(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRecord", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRecord indicates an expected call of DeleteRecord.
func (mr *MockIQueryClientMockRecorder) DeleteRecord(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRecord", reflect.TypeOf((*MockIQueryClient)(nil).DeleteRecord), arg0, arg1)
}

// GetRecords mocks base method.
func (m *MockIQueryClient) GetRecords(arg0 string) ([]dto.ClientRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecords", arg0)
	ret0, _ := ret[0].([]dto.ClientRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecords indicates an expected call of GetRecords.
func (mr *MockIQueryClientMockRecorder) GetRecords(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecords", reflect.TypeOf((*MockIQueryClient)(nil).GetRecords), arg0)
}

// Login mocks base method.
func (m *MockIQueryClient) Login(arg0, arg1 string) (dto.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", arg0, arg1)
	ret0, _ := ret[0].(dto.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockIQueryClientMockRecorder) Login(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockIQueryClient)(nil).Login), arg0, arg1)
}

// Register mocks base method.
func (m *MockIQueryClient) Register(arg0, arg1 string) (dto.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", arg0, arg1)
	ret0, _ := ret[0].(dto.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockIQueryClientMockRecorder) Register(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockIQueryClient)(nil).Register), arg0, arg1)
}

// UpdateRecord mocks base method.
func (m *MockIQueryClient) UpdateRecord(arg0 string, arg1 dto.ServerRecord) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRecord", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRecord indicates an expected call of UpdateRecord.
func (mr *MockIQueryClientMockRecorder) UpdateRecord(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRecord", reflect.TypeOf((*MockIQueryClient)(nil).UpdateRecord), arg0, arg1)
}
